rule pool_reads:
  input:
    FORWARD=expand("analysis/01_bbmap/{{sample}}/{{sample}}_{lane}_mapped_FP.fastq.gz",
                    lane = lanes),
    REVERSE=expand("analysis/01_bbmap/{{sample}}/{{sample}}_{lane}_mapped_RP.fastq.gz",
                    lane = lanes)
  threads:
    int(config['short_sh_commands_threads'])

  resources:
    mem_mb = int(config['short_sh_commands_mem_mb']),
    hours = int(config['short_sh_commands_hours'])

  output:
    FORWARD_POOLED="analysis/02_vsearch/{sample}/pooled_reads_{sample}_FP.fastq.gz",
    REVERSE_POOLED="analysis/02_vsearch/{sample}/pooled_reads_{sample}_RP.fastq.gz"

  shell:
    "srun /bin/cat {input.FORWARD} >> {output.FORWARD_POOLED} ;"
    "srun /bin/cat {input.REVERSE} >> {output.REVERSE_POOLED} ;"


rule vsearch_convert:
  input:
    FORWARD_READS = "analysis/02_vsearch/{sample}/pooled_reads_{sample}_FP.fastq.gz",
    REVERSE_READS = "analysis/02_vsearch/{sample}/pooled_reads_{sample}_RP.fastq.gz",

  output:
    FORWARD_FASTA = "analysis/02_vsearch/{sample}/{sample}_FP.fasta",
    REVERSE_FASTA = "analysis/02_vsearch/{sample}/{sample}_RP.fasta"

  params:
    vsearch=config["vsearch"]["vsearch_version"]

  threads:
    int(config['vsearch']['vsearch_threads'])

  resources:
    mem_mb = int(config['vsearch']['vsearch_mem_mb']),
    hours = int(config['vsearch']['vsearch_hours'])

  shell:
    " module add UHTS/Analysis/vsearch/{params.vsearch} ;"
    " srun vsearch --fastq_filter {input.FORWARD_READS} "
    "  --threads {threads} -fastaout {output.FORWARD_FASTA} ;"
    " srun vsearch --fastq_filter {input.REVERSE_READS} "
    "  --threads {threads} -fastaout {output.REVERSE_FASTA} ;"


# Create Taxonomy gza File
rule create_taxonomy_qza:
  input:
    tax_file = "resources/taxonomy_99_all_levels_consensus.txt"

  output:
    tax_gza = "analysis/02_vsearch/taxonomy.gza"

  conda:
    "../envs/qiime2.yaml"

  threads:
    int(config['vsearch']['vsearch_threads'])

  resources:
    mem_mb = int(config['vsearch']['vsearch_mem_mb']),
    hours = int(config['vsearch']['vsearch_hours'])

  params:
    conda_profile = "/mnt/apps/centos7/Conda/miniconda3/etc/profile.d/conda.sh"

  shell:
    " set +u ;"
    " source {params.conda_profile} ;"
    " conda activate qiime2-2020.2 ;"
    " srun qiime tools import "
    "  --type 'FeatureData[Taxonomy]' "
    "  --input-format HeaderlessTSVTaxonomyFormat "
    "  --input-path {input.tax_file} "
    "  --output-path {output.tax_gza} ;"

# Create reference_reads gza File
rule create_reference_reads_qza:
  input:
    "resources/all_reads_SILVA128.fna.gz"

  output:
    "analysis/02_vsearch/reference_reads.gza"

  conda:
    "../envs/qiime2.yaml"

  threads:
    int(config['vsearch']['vsearch_threads'])

  resources:
    mem_mb = int(config['vsearch']['vsearch_mem_mb']),
    hours = int(config['vsearch']['vsearch_hours'])

  params:
    conda_profile = "/mnt/apps/centos7/Conda/miniconda3/etc/profile.d/conda.sh"

  shell:
    " set +u ;"
    " source {params.conda_profile} ;"
    " conda activate qiime2-2020.2 ;"
    " srun qiime tools import "
    "  --type 'FeatureData[Sequence]' "
    "  --input-path {input} "
    "  --output-path {output} ;"


# Create query sequence artifacts

rule create_query_qza:
  input:
    FORWARD_FASTA = "analysis/02_vsearch/{sample}/{sample}_FP.fasta",
    REVERSE_FASTA = "analysis/02_vsearch/{sample}/{sample}_RP.fasta"

  output:
    FORWARD_qza = "analysis/02_vsearch/{sample}/{sample}_FP.qza",
    REVERSE_qza = "analysis/02_vsearch/{sample}/{sample}_RP.qza"

  conda:
    "../envs/qiime2.yaml"

  threads:
    int(config['vsearch']['vsearch_threads'])

  resources:
    mem_mb = int(config['vsearch']['vsearch_mem_mb']),
    hours = int(config['vsearch']['vsearch_hours'])

  params:
    conda_profile = "/mnt/apps/centos7/Conda/miniconda3/etc/profile.d/conda.sh"

  shell:
    " set +u ;"
    " source {params.conda_profile} ;"
    " conda activate qiime2-2020.2 ;"
    " srun qiime tools import "
    "  --type 'FeatureData[Sequence]' "
    "  --input-path {input.FORWARD_FASTA} "
    "  --output-path {output.FORWARD_qza} ;"
    " srun qiime tools import "
    "  --type 'FeatureData[Sequence]' "
    "  --input-path {input.REVERSE_FASTA} "
    "  --output-path {output.REVERSE_qza} ;"


rule classify_reads:
  input:
    FORWARD_qza = "analysis/02_vsearch/{sample}/{sample}_FP.qza",
    REVERSE_qza = "analysis/02_vsearch/{sample}/{sample}_RP.qza",
    REFERENCE_READS = "analysis/02_vsearch/reference_reads.gza",
    REFERENCE_TAXONOMY = "analysis/02_vsearch/taxonomy.gza"

  output:
    FORWARD_ABUNDANCE = "analysis/02_vsearch/{sample}/{sample}_FP_ABUNDANCE.qza",
    REVERSE_ABUNDANCE = "analysis/02_vsearch/{sample}/{sample}_RP_ABUNDANCE.qza"

  conda:
    "../envs/qiime2.yaml"

  threads:
    int(config['vsearch']['vsearch_threads'])

  resources:
    mem_mb = int(config['vsearch']['vsearch_mem_mb']),
    hours = int(config['vsearch']['vsearch_hours'])

  params:
    conda_profile = "/mnt/apps/centos7/Conda/miniconda3/etc/profile.d/conda.sh"

  shell:
    " set +u ;"
    " source {params.conda_profile} ;"
    " conda activate qiime2-2020.2 ;"
    " srun qiime feature-classifier classify-consensus-vsearch "
    "  --i-query {input.FORWARD_qza} "
    "  --i-reference-reads {input.REFERENCE_READS} "
    "  --i-reference-taxonomy {input.REFERENCE_TAXONOMY} "
    "  --p-maxaccepts 10 "
    "  --p-perc-identity 0.8 "
    "  --p-threads {threads} "
    "  --o-classification {output.FORWARD_ABUNDANCE} ;"
    " srun qiime feature-classifier classify-consensus-vsearch "
    "  --i-query {input.REVERSE_qza} "
    "  --i-reference-reads {input.REFERENCE_READS} "
    "  --i-reference-taxonomy {input.REFERENCE_TAXONOMY} "
    "  --p-maxaccepts 10 "
    "  --p-perc-identity 0.8 "
    "  --p-threads {threads} "
    "  --o-classification {output.FORWARD_ABUNDANCE} ;"
